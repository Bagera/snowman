const LZString = require('lz-string');

class State {
    constructor() {
        this.state = {};
        this.history = [];
    }

    /**
     * @returns {}
     */
    index(index) {
        let result = null;
        
        if(index > 0 && index < this.history.length) {
            result = history[index];
        }

        return result;
    }

    /**
     * Returns if internal history is empty or not
     * @function isEmpty
     * @returns {boolean} - Returns if State is empty
     */
    isEmpty() {
        return this.history.length === 0;
    }

    /**
     * Returns LZString + compressBase64 Hash.
     *
     * @function saveHash
     * @returns {string} - Returns the LZString hash
     */
    saveHash () {
        return LZString.compressToBase64(JSON.stringify({
            state: this.state,
            history: this.history
        }));
    }

    /**
     * Tries to restore the story state from a hash value generated by saveHash().
     *
     * @function restore
     * @param {string} hash - Hash to restore from
     * @returns {boolean} if the restore succeeded
     */

    restore (hash) {
        try {
            let save = JSON.parse(LZString.decompressFromBase64(hash));
            this.state = save.state;
            this.history = save.history;
        } catch (e) {
            /**
             * Triggered if there was an error with restoring from a hash.
             *
             * @event sm.restore.failed
             **/

            $.event.trigger('sm.restore.failed', { error: e });
            return false;
        }

        /**
         * Triggered after completing a restore from a hash.
         *
         * @event sm.restore.success
         */

        $.event.trigger('sm.restore.success');
        return true;
    }
}

module.exports = State;
